/* eslint-disable @typescript-eslint/no-unused-vars */
import { app, BrowserWindow, ipcMain, session } from "electron";
import { trafficLightPositionForMac } from "./utils";
import { TITLEBAR_HEIGHT } from "./utils/constants";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}
const createWindow = (): void => {
  // Create the browser window.
  const isMac = process.platform === "darwin";
  const mainWindow = new BrowserWindow({
    height: 720,
    width: 1280,
    minWidth: 576,
    minHeight: 800,
    webPreferences: {
      partition: "persist:yourname",
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webviewTag: true,
      nodeIntegration: false, // Important for security
      contextIsolation: true, // Isolate context to secure the app
      webSecurity: true, // Keep web security enabled
      allowRunningInsecureContent: true,
    },
    autoHideMenuBar: true,
    frame: isMac ? false : true,
    titleBarStyle: isMac ? "hidden" : "default",
    trafficLightPosition: trafficLightPositionForMac(TITLEBAR_HEIGHT),
  });
  session.defaultSession.cookies
    .get({})
    .then((cookies) => {
      return null;
    })
    .catch((error) => {
      return null;
    });
  session.fromPartition("persist:some-name").cookies.flushStore();

  mainWindow.webContents.session.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Content-Security-Policy": [
          "default-src 'self' http://localhost:* https://localhost:* https://* 'unsafe-inline'; " +
            "script-src 'self' 'unsafe-inline' 'unsafe-eval' http://localhost:* https://localhost:*; " +
            "img-src 'self' data: http://localhost:* https://localhost:* https://*; " +
            "style-src 'self' 'unsafe-inline' http://localhost:* https://localhost:*; ",
        ],
      },
    });
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
app.on("ready", () => {
  // Check for the auth cookie from the renderer process
  ipcMain.handle("check-auth-cookie", async (event) => {
    const cookies = await session.defaultSession.cookies.get({ name: "connect.sid" });
    if (cookies.length > 0) {
      return true;
    } else {
      return false;
    }
  });
});

app.on("ready", () => {
  ipcMain.on("quit-app", () => {
    app.quit();
  });
});
